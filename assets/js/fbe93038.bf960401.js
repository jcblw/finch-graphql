(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return a})),t.d(n,"default",(function(){return u}));var r=t(3),o=t(7),i=(t(0),t(92)),s={id:"testing",title:"Testing Finch GraphQL"},c={unversionedId:"testing",id:"testing",isDocsHomePage:!1,title:"Testing Finch GraphQL",description:"Using Finch GraphQL allows you to connect background and client scripts together in tests allowing you to write some integration tests that cover both background and client scripts. It is currently recommended that you use async messaging in your tests. This makes it super simple to write integration tests for Finch GraphQL. You can do something like this to swap the connection for tests.",source:"@site/docs/testing.md",sourceDirName:".",slug:"/testing",permalink:"/docs/testing",editUrl:"https://github.com/jointoucan/finch-graphql/edit/master/packages/finch-docs/docs/testing.md",version:"current",frontMatter:{id:"testing",title:"Testing Finch GraphQL"},sidebar:"someSidebar",previous:{title:"React",permalink:"/docs/react-ref"},next:{title:"Finch GraphiQL Devtools",permalink:"/docs/devtools"}},a=[{value:"Mocking Messaging Connections",id:"mocking-messaging-connections",children:[]}],p={toc:a};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Using Finch GraphQL allows you to connect background and client scripts together in tests allowing you to write some integration tests that cover both background and client scripts. It is currently recommended that you use async messaging in your tests. This makes it super simple to write integration tests for Finch GraphQL. You can do something like this to swap the connection for tests."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { FinchApi, FinchPortConnection, FinchMessageConnection } from '@finch/api';\n\nnew FinchApi({\n  ...\n  connection: process.env.NODE_ENV === 'test'\n    ? new FinchMessageConnection()\n    : new FinchPortConnection(),\n});\n")),Object(i.b)("h3",{id:"mocking-messaging-connections"},"Mocking Messaging Connections"),Object(i.b)("p",null,"If you are sending messages via async messages you can use the following code to connect your api with content scripts."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { FinchApi } from '@finch-graphql/api';\n\nconst defaultSender = {\n  id: 'foo',\n  tab: {\n    id: -1,\n    url: 'http://localhost:3000/',\n  },\n  url: 'http://localhost:3000/',\n};\n\nexport const connectResolvers = (\n  api: FinchApi,\n  context: any = defaultSender,\n) => {\n  const ogSendMessage = window.browser.runtime.sendMessage;\n  browser.runtime.sendMessage = jest\n    .fn()\n    .mockImplementation(message => api.onMessage(message, context));\n  return () => {\n    browser.runtime.sendMessage = ogSendMessage;\n  };\n};\n")))}u.isMDXComponent=!0},92:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),u=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=u(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=u(t),d=r,m=l["".concat(s,".").concat(d)]||l[d]||g[d]||i;return t?o.a.createElement(m,c(c({ref:n},p),{},{components:t})):o.a.createElement(m,c({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<i;p++)s[p]=t[p];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);